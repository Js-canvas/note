原文 http://www.cnblogs.com/developersupport/p/webpage-performance-best-practices.html#httprequest

一、减少http请求次数

可以通过简化页面设计来减少请求次数，但页面内容较多可以采用以下技巧。

1、捆绑文件: 现在有很多现成的库可以帮你将多个脚本文件捆绑成一个文件，将多个样式表文件捆绑成一个文件，以此来减少文件的下载次数。
2、CSS Sprites: 就是把多个图片拼成一副图片，然后通过CSS来控制在什么地方具体显示这整张图片的什么位置。
3、Image Maps：也是将多幅图拼在一起，然后通过坐标来控制显示导航。
4. Inline images: 通过编码的字符串将图片内嵌到网页文本中。

二、减少DNS查询次数

DNS查询也消耗响应时间，如果我们的网页内容来自各个不同的domain (比如嵌入了开放广告，引用了外部图片或脚本)，那么客户端首次解析这些domain也需要消耗一定的时间。DNS查询结果缓存在本地系统和浏览器中一段时间，所以DNS查询一般是对首次访问响应速度有所影响。

三、避免页面跳转

当客户端收到服务器的跳转回复时，客户端再次根据服务器回复中的location指定的地址再次发送请求，例如以下跳转回复。
   HTTP/1.1 301 Moved Permanently
   Location: http://example.com/newuri
   Content-Type: text/html

当客户端遇到这种回复的时候，用户只能等待客户端再次发送请求，有的网站甚至会一直跳n次，跳到他想带你去的地方…当然在这个时候用户看不到任何页面内容，只有浏览器的进度条一直在刷新。

四、缓存Ajax

Ajax可以帮助我们异步的下载网页内容，但是有些网页内容即使是异步的，用户还是在等待它的返回结果，例如ajax的返回是用户联系人的下拉列表。所以我们还是要注意尽量应用以下规则提高ajax的响应速度。

1、添加Expires 或 Cache-Control报文头使回复可以被客户端缓存
2、压缩回复内容
3、减少dns查询
4、精简javascript
5、避免跳转
6、配置Etags

五、延迟加载

这里讨论延迟加载需要我们知道我们的网页最初加载需要的最小内容集是什么。剩下的内容就可以推到延迟加载的集合中。
Javascript是典型的可以延迟加载内容。一个比较激进的做法是开发网页时先确保网页在没有Javascript的时候也可以基本工作，然后通过延迟加载脚本来完成一些高级的功能。

六、提前加载

延迟加载目的相反，提前加载的是为了提前加载接下来网页中访问的资源，下面是提前加载的类型

1、无条件提前加载：当前网页加载完成后，马上去下载一些其他的内容。
2、有条件加载：根据用户的输入推断需要加载的内容，雅虎的示例是search.yahoo.com。
3、有预期的的加载：这种情况一般发生在网页重新设计时，由于用户经常访问旧网页，本地对旧的网页内容缓存充分从而显得旧网页速度很快，而新的网页内容却没有缓存，设计者可以在旧网页的内容中预先加载一些新网页中可能用到的内容，这样新的网页就会生下来一些需要下载的资源。

七、减少DOM元素数量

网页中元素过多对网页的加载和脚本的执行都是沉重的负担，500个元素和5000个元素在加载速度上会有很大差别。

获取元素数量：document.getElementsByTagName('*').length

八、根据域名划分内容

浏览器一般对同一个域的下载连接数有所限制，按照域名划分下载内容可以浏览器增大并行下载连接，但是注意控制域名使用在2-4个之间，不然dns查询也是个问题。
一般网站规划会将静态资源放在类似于static.example.com，动态内容放在www.example.com上。这样做还有一个好处是可以在静态的域名上避免使用cookie。后面我们会在cookie的规则中提到。   

九、减少iframe数量

使用iframe要注意理解iframe的优缺点

优点

1、可以用来加载速度较慢的内容，例如广告。
2、安全沙箱保护。浏览器会对iframe中的内容进行安全控制。
3、脚本可以并行下载

缺点

1、即使iframe内容为空也消耗加载时间
2、会阻止页面加载
3、没有语义


